#!/usr/bin/env python3
"""
Setup script for Automated Options Analyzer
This script helps you configure email and run the automated analyzer
"""

import os
import sys
import getpass
import smtplib
from email.mime.text import MIMEText

def test_email_connection(email, app_password):
    """Test if email credentials work"""
    try:
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(email, app_password)
        server.quit()
        return True
    except Exception as e:
        print(f"‚ùå Email test failed: {e}")
        return False

def create_config_file():
    """Interactive setup to create config.py"""
    print("üîß Setting up Automated Options Analyzer")
    print("=" * 50)
    
    # Get email configuration
    print("\nüìß Email Configuration")
    print("You'll need a Gmail account with 2-factor authentication enabled")
    print("and an 'App Password' generated for this script.")
    print("Guide: https://support.google.com/accounts/answer/185833")
    print()
    
    from_email = input("Enter your Gmail address: ").strip()
    to_email = input("Enter recipient email (can be same): ").strip()
    
    print("\nüîë For the app password:")
    print("1. Go to Google Account settings")
    print("2. Security ‚Üí 2-Step Verification ‚Üí App passwords")
    print("3. Generate a new app password for 'Mail'")
    print("4. Use that 16-character password below")
    print()
    
    app_password = getpass.getpass("Enter Gmail app password: ").strip()
    
    # Test email connection
    print("\nüß™ Testing email connection...")
    if test_email_connection(from_email, app_password):
        print("‚úÖ Email connection successful!")
    else:
        print("‚ùå Email connection failed. Please check your credentials.")
        retry = input("Continue anyway? (y/n): ").lower()
        if retry != 'y':
            return False
    
    # Get analysis configuration
    print("\nüìä Analysis Configuration")
    ticker = input("Enter stock ticker to analyze [NVDA]: ").strip().upper() or "NVDA"
    
    try:
        price_range = float(input("Enter price range below current price [40]: ") or "40")
    except ValueError:
        price_range = 40
    
    # Schedule configuration
    print("\n‚è∞ Schedule Configuration")
    print("Options: hour, 30minutes, 2hours, day")
    schedule_interval = input("How often to run analysis [hour]: ").strip() or "hour"
    
    # Create config.py file
    config_content = f'''# Automated Options Analyzer Configuration
# Generated by setup script

EMAIL_CONFIG = {{
    'from_email': '{from_email}',
    'to_email': '{to_email}',
    'app_password': '{app_password}'
}}

ANALYSIS_CONFIG = {{
    'ticker': '{ticker}',
    'price_range': {price_range},
    'schedule_interval': '{schedule_interval}'
}}

EMAIL_SETTINGS = {{
    'send_emails': True,
    'attach_full_report': True,
    'summary_only': False
}}

LOG_CONFIG = {{
    'log_file': '/Users/mdarifuzzaman/Documents/puts/options_analyzer.log',
    'log_level': 'INFO'
}}
'''
    
    # Write config file
    config_path = '/Users/mdarifuzzaman/Documents/puts/config.py'
    with open(config_path, 'w') as f:
        f.write(config_content)
    
    print(f"\n‚úÖ Configuration saved to {config_path}")
    
    # Send test email
    test_send = input("\nüìß Send test email? (y/n): ").lower()
    if test_send == 'y':
        try:
            msg = MIMEText("üéâ Your Automated Options Analyzer is set up correctly!")
            msg['Subject'] = "Options Analyzer Test Email"
            msg['From'] = from_email
            msg['To'] = to_email
            
            server = smtplib.SMTP('smtp.gmail.com', 587)
            server.starttls()
            server.login(from_email, app_password)
            server.sendmail(from_email, to_email, msg.as_string())
            server.quit()
            
            print("‚úÖ Test email sent successfully!")
        except Exception as e:
            print(f"‚ùå Failed to send test email: {e}")
    
    return True

def main():
    """Main setup function"""
    print("üöÄ Automated Options Analyzer Setup")
    print("This will help you configure email notifications")
    print("and set up automated hourly analysis.")
    print()
    
    # Check if config already exists
    config_path = '/Users/mdarifuzzaman/Documents/puts/config.py'
    if os.path.exists(config_path):
        overwrite = input("Config file already exists. Overwrite? (y/n): ").lower()
        if overwrite != 'y':
            print("Setup cancelled.")
            return
    
    # Run interactive setup
    if create_config_file():
        print("\nüéâ Setup complete!")
        print("\nNext steps:")
        print("1. Run: python automated_options_analyzer.py")
        print("2. The analyzer will run every hour and email you results")
        print("3. Check the log file for detailed information")
        print("4. Press Ctrl+C to stop the analyzer")
        print()
        
        # Ask if they want to start now
        start_now = input("Start the automated analyzer now? (y/n): ").lower()
        if start_now == 'y':
            os.system('python /Users/mdarifuzzaman/Documents/puts/automated_options_analyzer.py')
    else:
        print("‚ùå Setup failed. Please try again.")

if __name__ == "__main__":
    main()
